@vert {
#version 150

    in vec3 in_Position;
    in vec3 in_Normal;

    out vec3 g_Normal;

    void main(void) {
        g_Normal = in_Normal;
        gl_Position = vec4(in_Position, 1.0);
    }

}

@geom {
#version 150
    bool inFrustum( vec3 pos ) {
        bool x = -1 <= pos.x && pos.x <= 1;
        bool y = -1 <= pos.y && pos.y <= 1;
        bool z = -1 <= pos.z && pos.z <= 1;
        return x && y && z;
    }

    layout(triangles) in;
    layout(line_strip, max_vertices = 2) out;

    in vec3 g_Normal[3];

    out vec3 f_Normal;
    out vec3 f_View;
    out vec4 f_Color;

    uniform mat4 modelViewMatrix;
    uniform mat4 projectionMatrix;
    uniform mat4 lightMatrix;
    uniform sampler3D sampler;
    //uniform sampler3D sampler;
    uniform int numLayers;
    uniform float hairLength;

    void main() {


        mat3 normalMatrix = mat3(modelViewMatrix);
        mat4 M = projectionMatrix * modelViewMatrix;

        vec3 mid_Position = vec3(0);
        vec3 mid_Normal = vec3(0);
        for(int i = 0; i < 3; ++i) {
            mid_Position += gl_in[i].gl_Position.xyz;
            mid_Normal += g_Normal[i];
        }
        mid_Position /= 3;
        mid_Normal = normalize(mid_Normal);

        vec4 light_Position;
        vec3 density_TexCoord;

        vec3 hair_Position;
        // hair root
        hair_Position = mid_Position;
        light_Position = lightMatrix * vec4(hair_Position, 1);
        light_Position /= light_Position.w;
        density_TexCoord = (vec3(light_Position) + 1.0) / 2.0;
        f_Color = texture(sampler, density_TexCoord); 
        f_Color.a = 1;
        f_Normal = normalMatrix * mid_Normal;
        f_View = vec3(modelViewMatrix * vec4(hair_Position, 1.0)); //gl_Position.xyz;

        if( ! inFrustum ( light_Position.xyz ) ) {
            f_Color = vec4(0);
        }


        gl_Position = M * vec4(mid_Position,1);
        gl_Position /= gl_Position.w;
        EmitVertex();

        // hair top
        hair_Position = mid_Position + hairLength * mid_Normal;
        light_Position = lightMatrix * vec4(hair_Position, 1);
        light_Position /= light_Position.w;
        density_TexCoord = (vec3(light_Position) + 1.0) / 2.0;
        f_Color = texture(sampler, density_TexCoord); 
        f_Color.a = 1.0;
        f_Normal = normalMatrix * mid_Normal;
        f_View = vec3(modelViewMatrix * vec4(hair_Position, 1.0)); //gl_Position.xyz;

        if( ! inFrustum ( light_Position.xyz ) ) {
            f_Color = vec4(0); 
        }


        gl_Position = M * vec4(hair_Position, 1);
        gl_Position /= gl_Position.w;
        EmitVertex();

        EndPrimitive();

    }

}

@frag {
#version 150

    in vec3 f_Normal;
    in vec3 f_View;
    in vec4 f_Color;

    out vec4 out_Color;

    uniform vec3 light;
    uniform int numLayers;
    uniform float shadeFactor;

    void main(void) {

        const float ambient = 0.25;
        const float diffuseFactor = 0.5;
        const float specularFactor = 0.5; 
        const float specular_exp = 5;
        float diffuse, specular, shade;

        vec3 l = normalize(light);
        vec3 n = normalize(f_Normal);
        vec3 v = normalize(- f_View);

        diffuse = length(cross(n, l)); // Hair shading
        // Diffuse: temporary adhoc
        //float angle = acos(dot(n,l));
        //diffuse = cos(angle/2);
        diffuse = diffuseFactor * max(diffuse, 0);

        // Specular
        vec3 half_Vector = normalize(l + v);
        specular = max(sqrt(1 - pow(dot(half_Vector, n), 2)), 0); //Kajiya-Kay Model
        specular = specularFactor * pow(specular, specular_exp);

        // Visibility shade
        float volumeFactor = pow(numLayers / 10, 3); // numLayers^3 normalize by voxel volume
        shade = pow(0.99, shadeFactor * f_Color.r); 

        // Put together
        float shadeColor = shade * ( ambient + diffuse + specular );
        float shadeAlpha = f_Color.a;

        out_Color = vec4(vec3(shadeColor), shadeAlpha); 
        //out_Color = vec4(diffuse, diffuse, diffuse, 1);
        //out_Color = vec4(shade, shade, shade, f_Color.a);//f_Color.a);
    }
}
