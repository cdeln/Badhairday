@vert {
#version 420

    in vec3 in_Position;
    in vec3 in_Normal;
    in vec2 in_TexCoord;

    out vec3 tc_Position;
    out vec3 tc_Normal;
    out vec2 tc_TexCoord;

    void main(void) {
        tc_Position = in_Position;
        tc_Normal = in_Normal;
        tc_TexCoord = in_TexCoord;
    }
}

@tesc {
#version 420

    layout(vertices = 1) out;
    in vec3 tc_Position[]; // From vertex shader
    in vec3 tc_Normal[]; // From vertex shader
    in vec2 tc_TexCoord[];

    uniform int innerTessLevel;
    uniform int outerTessLevel;
    struct BezierPatch {
        vec3 v300;
        vec3 v210;
        vec3 v120;
        vec3 v030;
        vec3 v021;
        vec3 v012;
        vec3 v003;
        vec3 v102;
        vec3 v201;
        vec3 v111;

        vec3 n200;
        vec3 n020;
        vec3 n002;

        vec3 n110;
        vec3 n011;
        vec3 n101;

        vec2 t100;
        vec2 t010;
        vec2 t001;
    };

    out patch BezierPatch o;

    vec3 project(vec3 point, vec3 origin, vec3 normal) {
        vec3 direction = point - origin;
        float projlen = dot(direction, normal);
        vec3 residual = projlen * normal;
        return point - residual;
    }

    void main() {

        // Copy normals
        o.n200 = tc_Normal[0];
        o.n020 = tc_Normal[1];
        o.n002 = tc_Normal[2];

        // Copy texture coordinates
        o.t100 = tc_TexCoord[0];
        o.t010 = tc_TexCoord[1];
        o.t001 = tc_TexCoord[2];

        // Copy original vertices
        o.v300 = tc_Position[0];
        o.v030 = tc_Position[1];
        o.v003 = tc_Position[2];

        // Calc edge vectors
        vec3 e300 = o.v003 - o.v030;
        vec3 e030 = o.v300 - o.v003;
        vec3 e003 = o.v030 - o.v300;

        o.n110 = normalize(reflect((o.n200 + o.n020)/2, e300));
        o.n101 = normalize(reflect((o.n200 + o.n002)/2, e030));
        o.n011 = normalize(reflect((o.n020 + o.n002)/2, e003));

        // Calc midpoints on each edge
        o.v210 = o.v300 + e003 / 3;
        o.v120 = o.v300 + 2 * e003 / 3;

        o.v021 = o.v030 + e300 / 3;
        o.v012 = o.v030 + 2 * e300 / 3;

        o.v102 = o.v003 + e030 / 3;
        o.v201 = o.v003 + 2 * e030 / 3;

        // Project onto planes
        o.v210 = project(o.v210, o.v300, o.n200);
        o.v120 = project(o.v120, o.v030, o.n020);

        o.v021 = project(o.v021, o.v030, o.n020);
        o.v012 = project(o.v012, o.v003, o.n002);

        o.v102 = project(o.v102, o.v003, o.n002);
        o.v201 = project(o.v201, o.v300, o.n200);

        // Calc center point
        vec3 c = ( o.v300 + o.v030 + o.v003 ) / 3;
        o.v111 = (o.v210 + o.v120 + o.v021 + o.v012 + o.v102 + o.v201) / 6;
        o.v111 += (o.v111 - c) / 2;

        gl_TessLevelInner[0] = innerTessLevel;
        gl_TessLevelOuter[0] = outerTessLevel;
        gl_TessLevelOuter[1] = outerTessLevel;
        gl_TessLevelOuter[2] = outerTessLevel;
    }
}

@tese{
#version 420

    layout(triangles) in;

    struct BezierPatch {
        vec3 v300;
        vec3 v210;
        vec3 v120;
        vec3 v030;
        vec3 v021;
        vec3 v012;
        vec3 v003;
        vec3 v102;
        vec3 v201;
        vec3 v111;

        vec3 n200;
        vec3 n020;
        vec3 n002;
        vec3 n110;
        vec3 n011;
        vec3 n101;

        vec2 t100;
        vec2 t010;
        vec2 t001;
    };

    in patch BezierPatch o;

    out vec3 g_Position;
    out vec3 g_Normal;
    out vec2 g_TexCoord;

    void main() {

        float u = gl_TessCoord.x;
        float v = gl_TessCoord.y;
        float w = gl_TessCoord.z;

        float u2 = pow(u,2);
        float v2 = pow(v,2);
        float w2 = pow(w,2);

        float u3 = pow(u,3);
        float v3 = pow(v,3);
        float w3 = pow(w,3);

        g_Position =
            u3 * o.v300 + v3 * o.v030 + w3 * o.v003
            + 3 * u2 * v * o.v210 + 3 * u * v2 * o.v120
            + 3 * v2 * w * o.v021 + 3 * v * w2 * o.v012
            + 3 * w2 * u * o.v102 + 3 * w * u2 * o.v201
            + 6 * u * v * w * o.v111;

        g_Normal = u2 * o.n200 + v2 * o.n020 + w2 * o.n002
          + u*v*o.n110 + v*w*o.n011 + u*w*o.n101;
        g_TexCoord = u * o.t100 + v * o.t010 + w * o.t001;
    }
}

@geom {
#version 150

#define MAX_VERTICES 20

    /*
    bool inFrustum( vec3 pos ) {
        bool x = -1 <= pos.x && pos.x <= 1;
        bool y = -1 <= pos.y && pos.y <= 1;
        bool z = -1 <= pos.z && pos.z <= 1;
        return x && y && z;
    }
    */

    layout(triangles) in;
    layout(line_strip, max_vertices = MAX_VERTICES) out;

    in vec3 g_Position[];
    in vec3 g_Normal[];
    in vec2 g_TexCoord[];

    out vec3 f_Normal;
    out vec3 f_View;
    out vec3 f_Color;
    out vec3 f_TexCoord;

    uniform mat4 MVP;
    uniform mat4 modelViewMatrix;
    uniform mat3 normalMatrix;
    uniform mat4 lightMatrix;

    uniform sampler3D sampler;
    uniform sampler2D tex;

    uniform vec3 forceCenter;

    //uniform float hairLength;
    uniform float shadeFactor;

    void generateVertex(vec3 position, vec3 normal){

        vec4 lightPos = lightMatrix * vec4(position,1);
        lightPos /= lightPos.w;

        f_Normal = normalMatrix * normal;
        f_TexCoord = (lightPos.xyz + 1)/2;
        f_View = vec3(modelViewMatrix * vec4(position,1));
        gl_Position = MVP * vec4(position, 1);
        EmitVertex();
    }

    void main() {

        vec4 material = texture(tex, g_TexCoord[2]);
        int segments = 10;
        float segLength = 0.05;
        vec3 gravityForce = vec3(0,-1,0);
        f_Color= vec3(1);

        //Match colors with dot product. Alpha = 0 because it doesnt matter
        const vec4 red = vec4(1,0,0,0);
        const vec4 blue = vec4(0,0,1,0);
        const vec4 green = vec4(0,1,0,0);
        const vec4 white = vec4(1,1,1,0);
        const vec4 black = vec4(0,0,0,0);

        if (dot(material, red) > 0.5) {
            segments = 5;
            segLength = 0.03; //Head
        }
        else if (dot(material, blue) > 0.5) {
            segLength = 0.06;
            gravityForce = vec3(0,-0.4,0); //Chest, mane
            f_Color =  vec3(0.8,0.8,0.2);
        }
        else if (dot(material, green) > 0.5 ) {
            segments = 5;
            segLength = 0.03; //Body
            f_Color =  vec3(0.6,0.6,0.4);
        }

        if(dot(material, white) > 2) {
            segLength = 0.04;
            gravityForce = vec3(0,-0.2,0); // Fluffy tail
        }
        else if (dot(material, material) < 0.2) {
            segments = 1;
            segLength = 0.0; // eyes no hair
            f_Color =  vec3(0,0,0);
        }

        vec3 midPos = vec3(0);
        vec3 midNormal =  vec3(0);
        for(int i = 0; i < 3; ++i) {
            midPos += g_Position[i];
            midNormal += g_Normal[i];
        }
        midPos /= 3;
        midNormal /= 3;

        vec3 pos = midPos;
        vec3 dir = normalize(midNormal);
        for(int n = 0; n < segments; ++n) {

            generateVertex(pos, dir);

            pos += segLength * dir;
            vec3 force = normalize(pos - forceCenter);
            float weight = exp( - distance(pos, forceCenter));
            dir = normalize(dir + gravityForce + weight*force);
        }
        EndPrimitive();
    }
}

@frag {
#version 420

    in vec3 f_Normal;
    in vec3 f_View;
    in vec3 f_Color;
    in vec3 f_TexCoord;

    out vec4 out_Color;

    uniform vec3 light;
    uniform float shadeFactor;
    uniform sampler3D sampler;
    uniform sampler2D depthSampler;
    uniform bool enableShadowMap;

    float sampleShadow(vec3 depthCoord) {
        if ( texture( depthSampler, depthCoord.xy ).r < depthCoord.z ) {
            return 1;
        }
        return 0;
    }

    float calcShadow(vec3 depthCoord) {

        vec2 texSize = textureSize(depthSampler, 0);
        float shadow = 0;
        vec3 offsetDepth = vec3(0);
        const int sampleRadius = 3;
        const int numSamples = (2*sampleRadius + 1) * (2*sampleRadius + 1);
        for(int x = -sampleRadius; x <= sampleRadius; ++x) {
            for(int y = -sampleRadius; y <= sampleRadius; ++y) {
                offsetDepth.xy = vec2(x,y) / texSize;
                shadow += sampleShadow(depthCoord + offsetDepth);
            }
        }
        return shadow / numSamples;
    }

    float vcos(vec3 a, vec3 b) {
        return abs(dot(a,b));
    }

    float vsin(vec3 a, vec3 b) {
        return length(cross(a,b));
    }

    void main(void) {

        const float ambient = 0.1;
        const float diffuseFactor = 1.0;
        const float specularFactor = 1.0;
        const float specularExp = 150;
        float diffuse, specular, visibility, shadeColor, shadeAlpha;

        vec3 l = normalize(light);
        vec3 n = normalize(f_Normal);
        vec3 v = normalize(- f_View);

        diffuse = diffuseFactor * vsin(n,l);

        // Specular
        vec3 halfVector = normalize(l + v);
        specular = vsin(halfVector, n);
        specular = specularFactor * pow(specular, specularExp);

        float shadow = 1;
        if( enableShadowMap ) {
            shadow = 1 - calcShadow(f_TexCoord);
        }

        float hairShadow = texture(sampler, f_TexCoord).r;
        visibility = pow(0.99, shadeFactor * hairShadow);

        shadeColor = ambient + visibility * shadow * ( diffuse + specular);
        shadeAlpha = 1;//tex_Color.a;
        out_Color = vec4(vec3(shadeColor)*f_Color, shadeAlpha);
    }
}
