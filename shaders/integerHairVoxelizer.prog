@vert {
#version 430

    in  vec3 in_Position;
    in  vec3 in_Normal;
    in  vec2 in_TexCoord;

    out vec3 tc_Position;
    out vec3 tc_Normal;
    out vec2 tc_TexCoord;

    void main() {
        tc_Position = in_Position;
        tc_Normal = in_Normal;
        tc_TexCoord = in_TexCoord;
    }
}

@tesc {
#version 430

    layout(vertices = 3) out;
    in vec3 tc_Position[];
    in vec3 tc_Normal[];
    in vec2 tc_TexCoord[];

    out vec3 te_Position[];
    out vec3 te_Normal[];
    out vec2 te_TexCoord[];

    uniform int tessLevel;

    void main()
    {
        te_Position[gl_InvocationID] = tc_Position[gl_InvocationID];
        te_Normal[gl_InvocationID] = tc_Normal[gl_InvocationID];
        te_TexCoord[gl_InvocationID] = tc_TexCoord[gl_InvocationID];
        gl_TessLevelInner[0] = tessLevel;
        gl_TessLevelOuter[0] = 1;
        gl_TessLevelOuter[1] = 1;
        gl_TessLevelOuter[2] = 1;
    }
}

@tese {
#version 430

    vec2 baryInterp2(vec2 v0, vec2 v1, vec2 v2) {
        vec2 x = gl_TessCoord.x * v0;
        vec2 y = gl_TessCoord.y * v1;
        vec2 z = gl_TessCoord.z * v2;
        return x + y + z;
    }

    vec3 baryInterp3(vec3 v0, vec3 v1, vec3 v2) {
        vec3 x = gl_TessCoord.x * v0;
        vec3 y = gl_TessCoord.y * v1;
        vec3 z = gl_TessCoord.z * v2;
        return x + y + z;
    }

    layout(triangles) in;
    in vec3 te_Position[];
    in vec3 te_Normal[];
    in vec2 te_TexCoord[];

    out vec3 g_Position;
    out vec3 g_Normal;
    out vec2 g_TexCoord;

    void main() {
        g_Position = baryInterp3(te_Position[0], te_Position[1], te_Position[2]);
        g_Normal = baryInterp3(te_Normal[0], te_Normal[1], te_Normal[2]);
        g_TexCoord = baryInterp2(te_TexCoord[0], te_TexCoord[1], te_TexCoord[2]);
    }
}

@geom {
#version 430
    layout(triangles) in;
    layout(line_strip, max_vertices = 20) out;

    in vec3 g_Position[];
    in vec3 g_Normal[];
    in vec2 g_TexCoord[];

    out vec3 f_Position;

    uniform mat4 transform;
    uniform sampler2D tex;
    uniform vec3 forceCenter;
    uniform bool doFlip;

    vec4 calcpos(vec4 pos, vec3 dir) {
        vec3 p = pos.xyz / pos.w;
        vec3 adir = abs(dir);
        if( adir.x < adir.y && adir.x < adir.z )  {
            return vec4(p.y, p.z, 0, 1);
        }
        else if( adir.y < adir.x && adir.y < adir.z ) {
            return vec4(p.x, p.z, 0, 1);
        }
        return vec4(p.x, p.y, 0, 1);
    }

    void genVertex(vec3 pos, vec3 dir) {
        vec4 tmp = transform * vec4(pos,1);
        if( doFlip ) {
            gl_Position = calcpos(tmp, dir);
        }
        else {
            gl_Position = tmp; 
        }
        f_Position = tmp.xyz / tmp.w;
        EmitVertex();
    }

    void main () {

        vec4 material = texture(tex, g_TexCoord[2]);
        //const int segments = 10;
        //const float segLength = 0.05;
        int segments = 10;
        float segLength = 0.05;
        vec3 gravityForce = vec3(0,-1,0);

        //Match colors with dot product. Alpha = 0 because it doesnt matter
        vec4 red = vec4(1,0,0,0);
        vec4 blue = vec4(0,0,1,0);
        vec4 green = vec4(0,1,0,0);
        vec4 white = vec4(1,1,1,0);
        vec4 black = vec4(0,0,0,0);

        if (dot(material, red) > 0.5) {
            segments = 5;
            segLength = 0.03; //Head
        }
        else if (dot(material, blue) > 0.5) {
            segLength = 0.06;
            gravityForce = vec3(0,-0.4,0); //Chest, mane
        }
        else if (dot(material, green) > 0.5 ) {
            segments = 5;
            segLength = 0.03; //Body
        }

        if(dot(material, white) > 2) {
            segLength = 0.04;
            gravityForce = vec3(0,-0.2,0); // Fluffy tail
        }
        else if (dot(material, material) < 0.2) {
            segments = 1;
            segLength = 0.0; // eyes no hair
        }

        vec3 midPos = vec3(0);
        vec3 midNormal =  vec3(0);
        for(int i = 0; i < 3; ++i) {
            midPos += g_Position[i];
            midNormal += g_Normal[i];
        }
        midPos /= 3;
        midNormal /= 3;

        vec3 segStartPos = midPos;
        vec3 hairDir = normalize(midNormal);
        vec3 force = vec3(0,0,0);
        for(int n = 0; n < segments; ++n) {

            genVertex(segStartPos, hairDir);
            genVertex(segStartPos + segLength, hairDir);
            /*
               gl_Position = transform * vec4(segStartPos,1);
               f_Position = gl_Position.xyz / gl_Position.w;
               EmitVertex();
               gl_Position = transform * vec4(segStartPos + segLength * hairDir,1);
               f_Position = gl_Position.xyz / gl_Position.w;
               EmitVertex();
             */
            EndPrimitive();

            segStartPos += segLength * hairDir;
            force =  normalize(segStartPos - forceCenter);
            float weight = exp( - distance(segStartPos,forceCenter));
            hairDir = normalize(hairDir + gravityForce + weight*force);
        }

        /*
           for(int i = 0; i < 3; ++i) {
           gl_Position = transform * vec4(g_Position[i],1);
           f_Position = gl_Position.xyz / gl_Position.w;
           EmitVertex();
           gl_Position = transform * vec4(g_Position[i] + 0.1*g_Normal[i],1);
           f_Position = gl_Position.xyz / gl_Position.w;
           EmitVertex();
           EndPrimitive();
           }
         */
    }
}


@frag {
#version 430

    in vec3 f_Position;

    layout(r32ui, binding = 0) uniform uimage3D voxelGrid;
    layout(r32ui, binding = 1) uniform uimage3D lock;

    uniform bool forwardInterpolate;

    void takeLock(ivec3 pos) {
        uint locked;
        do {
            locked = imageAtomicCompSwap(lock, pos, 0u, 1u);
        } while( locked != 0u );
    }

    void releaseLock(ivec3 pos) {
        imageStore(lock, pos, uvec4(0));
    }

    void main() {

        ivec3 gridSize = imageSize(voxelGrid);
        vec3 voxelPos = gridSize * (f_Position + 1)/2;
        ivec3 voxelCoord = ivec3(floor(voxelPos));
        //vec4 voxelValue = vec4(1);

        // Funkar inte!?
        //takeLock(voxelCoord);
        //vec4 col = imageLoad(voxelGrid, voxelCoord);
        //imageStore(voxelGrid, voxelCoord, voxelValue + col);
        //releaseLock(voxelCoord);

        //imageStore(voxelGrid, voxelCoord, voxelValue);
        /*
           for(int x = -1; x <= 1; ++x) {
           for(int y = -1; y <= 1; ++y) {
           for(int z = -1; z <= 1; ++z) {
           imageStore(voxelGrid, voxelCoord + ivec3(x,y,z), voxelValue);
           }
           }
           }
         */
        /*
           float fx = max(0, 1 - abs(voxelPos.x - floor(voxelPos).x));
           float fy = max(0, 1 - abs(voxelPos.y - floor(voxelPos).y));
           float fz = max(0, 1 - abs(voxelPos.z - floor(voxelPos).z));
         */
        //imageAtomicAdd(voxelGrid, voxelCoord, int(floor(100*fx*fy*fz))); 

        // Trilinear forward interpolation, num_vertices = 27
        vec3 floorPos = floor( voxelPos ); 
        vec3 curPos;
        float fx,fy,fz;

        if( forwardInterpolate )  { 
            for(int x = -1; x <= 1; ++x) {
                for(int y = -1; y <= 1; ++y) {
                    for(int z = -1; z <= 1; ++z) {
                        curPos = floorPos + vec3(x,y,z); 
                        curPos += vec3(0.5);
                        fx = max(0, 1 - abs(curPos.x - voxelPos.x));
                        fy = max(0, 1 - abs(curPos.y - voxelPos.y));
                        fz = max(0, 1 - abs(curPos.z - voxelPos.z));
                        imageAtomicAdd(voxelGrid, ivec3(floor(curPos)), uint(floor(10000*fx*fy*fz)));
                    }
                }
            }
        }
        else {
            imageAtomicAdd(voxelGrid, voxelCoord, 10000u);
        }

    }
}
